"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string, json
from pathlib import Path
from django.contrib import messages
from str2bool import str2bool 
from dotenv import load_dotenv


load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    SECRET_KEY = '426967205465636820436F6D70616E69657320616E6420564373204B696C6C20476F6F64204C6966650A'

PRO_SUBSCRIPTION_PRICE = os.environ.get('PRO_SUBSCRIPTION_PRICE', '9.99')
PRO_SUBSCRIPTION_COMPANY_PRICE = os.environ.get('PRO_SUBSCRIPTION_COMPANY_PRICE', '39.99')
CUST_DEV_WEEK_PRICE = os.environ.get('CUST_DEV_WEEK_PRICE', '999')
ONBOARDING_KIT_PRICE = os.environ.get('ONBOARDING_KIT_PRICE', '19.99')


# Trust the proxy for HTTPS detection
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# If you rely on X-Forwarded-Host (Caddy default) for multi-tenant host logic
USE_X_FORWARDED_HOST = True


# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.environ.get('DEBUG'))


ONLYOFFICE_JWT_SECRET = "ep3soh8iWa2pah0OoQuee8veiyax5yoo"
ONLYOFFICE_DOCSERVER_URL = "https://ds.ghavimehr.com"
ONLYOFFICE_ALLOWED_IPS = ["192.168.101.5/32"] 
ONLYOFFICE_CALLBACK = "https://emr.ghavimehr.com/f/oocallback/"
PATIENT_DATA = os.path.join(BASE_DIR, "data")
ONLYOFFICE_JWT_EXPIRE = 7200


# Hosts Settings
ALLOWED_HOSTS = [ 'emr.ghavimehr.com', '.emr.ghavimehr.com','www.emr.ghavimehr.com', 
                'emr.drarzaghi.com', '.emr.drarzaghi.com', 'www.emr.drarzaghi.com', 
                'emrdev.ghavimehr.com', '.emrdev.ghavimehr.com', 'www.emrdev.ghavimehr.com', 
                'emrdemo.ghavimehr.com', '.emrdemo.ghavimehr.com', 'www.emrdemo.ghavimehr.com', 
                'irlgbt.com', '.irlgbt.com', 'www.irlgbt.com' ]
CSRF_TRUSTED_ORIGINS = [ 'http://emrdemo.ghavimehr.com', 'https://emrdemo.ghavimehr.com', 'https://emr.drarzaghi.com', 'http://emr.drarzaghi.com', 
                        'https://emrdev.ghavimehr.com', 'https://www.emrdev.ghavimehr.com', 'http://emr.ghavimehr.com', 'https://emr.ghavimehr.com',
                        'https://irlgbt.com', 'http://irlgbt.com',]
USE_X_FORWARDED_HOST = True

LOGIN_URL = '/users/signin/'




# Default language
LANGUAGE_CODE = 'fa'

# Supported languages
LANGUAGES = [
    ('fa', 'Persian'),
    ('en', 'English'),
]


LOCALE_PATHS = [
    BASE_DIR / 'locale/',
]

LANGUAGE_COOKIE_NAME = 'django_language'  # Default: 'django_language'
LANGUAGE_COOKIE_AGE = 31536000  # 1 year (in seconds)
LANGUAGE_COOKIE_PATH = '/'  # Default: '/'
LANGUAGE_COOKIE_SECURE = True  # Optional: Use with HTTPS
LANGUAGE_COOKIE_HTTPONLY = True  # Optional: Prevent JavaScript access


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'verbose': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'db_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'db_queries.log'),
            'formatter': 'simple',
        },
        'main_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'main.log'),
            'formatter': 'simple',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['db_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django': {
            'handlers': ['main_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'generate_demography_pdf': {
            'handlers': ['main_file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'apps.emr.lab': {
            'handlers': ['main_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'apps.emr.oneglance': {
            'handlers': ['main_file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}





# Application definition

INSTALLED_APPS = [
    "webpack_loader",
    "frontend",
    "django.contrib.sites",

    
    'accounts.apps.AccountsConfig',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "widget_tweaks",
    "django_jalali",
    "django_select2",

    # CLI
    "cli",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_yasg",
    "django_filters",
    "corsheaders",

    # APPS
    #"core", #needed for multi-tenancy
    'core.apps.CoreConfig', #needed for multi-tenancy
    "apps.ai_processor",
    "apps.api",
    "apps.common",
    "apps.pages",
    "apps.authentication",
    "apps.blog",
    "apps.dashboard",


    "apps.products",
    "apps.tasks",
    "apps.support",

    "apps.tools",
    "apps.tool_db_migrator",
    "apps.tool_django_generator",

    # Util
    "debug_toolbar",
    "docs",
    "sslserver",

    # allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
#    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',

    'django_quill',
    'django_celery_results',
    'django.contrib.sitemaps',

    # My apps
    "apps.emr.files",
    "apps.my_dashboard",
    "apps.patients_dashboard",
    "apps.emr.identity",
    "apps.emr.ros",
    "apps.emr.lab",
    "apps.emr.events",
    "apps.emr.questionnaires",
    "apps.emr.rtms",

]

MIDDLEWARE = [
    #my important middleware
    "apps.common.middlewares.RealIPMiddleware",
    "core.dynamic_domain.DynamicDomainMiddleware",


    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django.middleware.locale.LocaleMiddleware',

    # Util
    "debug_toolbar.middleware.DebugToolbarMiddleware",

    # allauth 
    "allauth.account.middleware.AccountMiddleware",

    # my middlewares
    "apps.dashboard.log_middleware.APILoggingMiddleware",


]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "core.urls"

UI_TEMPLATES = os.path.join(BASE_DIR, 'templates') 

USE_I18N = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [UI_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",


                "apps.common.context_processors.profile_context",
                "apps.common.context_processors.version_context",
                "apps.common.context_processors.props_context",

                "apps.common.context_processors.price_subscription_pro",
                "apps.common.context_processors.price_subscription_company",
                "apps.common.context_processors.price_cust_dev_week",
                "apps.common.context_processors.price_onboarding_kit",

                ## My developments
                "apps.my_dashboard.context_processors.selected_patient",
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE   = os.environ.get('DB_ENGINE')
DB_USERNAME = os.environ.get('DB_USERNAME')
DB_PASS     = os.environ.get('DB_PASS')
DB_HOST     = os.environ.get('DB_HOST')
DB_PORT     = os.environ.get('DB_PORT')
DB_NAME     = os.environ.get('DB_NAME')

#if DB_ENGINE and DB_NAME and DB_USERNAME:


## PostgerSQL

# DATABASES = {
#     'default': {
#         'ENGINE'  : 'django.db.backends.postgresql',
#         'NAME'    : 'emr',
#         'USER'    : 'psycho',
#         'PASSWORD': 'ooPh0Wu0yaighahZ',
#         'HOST'    : '127.0.0.1',
#         'PORT'    : '5432',
#     },
# }





DATABASE_ROUTERS = ['core.db_routers.TenantRouter']



DATABASES = {

    'customer_config': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'emr_customer_config_db',
        'USER': 'emr_customer_config_user',
        'PASSWORD': 'pL5nTOjGLce/z0HYz5jT5Q==',
        'HOST': '127.0.0.1',
        'PORT': '3307',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"},
        'TIME_ZONE':         "Asia/Tehran",
        'CONN_HEALTH_CHECKS': True,
        'CONN_MAX_AGE':   60,
        'ATOMIC_REQUESTS': True,
    },


    'default': {
        'ENGINE'  : 'django.db.backends.mysql',
        'NAME'    : 'emrdev',
        'USER'    : 'psycho',
        'PASSWORD': 'ooPh0Wu0yaighahZ',
        'HOST'    : '127.0.0.1',
        'PORT'    : '3307',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"},
        'TIME_ZONE':  "Asia/Tehran" ,
        'CONN_MAX_AGE':   60,
        'ATOMIC_REQUESTS': True,
        'CONN_HEALTH_CHECKS': True,
    },
}







# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/



USE_I18N = True

USE_TZ = True
TIME_ZONE = "Asia/Tehran"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MESSAGE_TAGS = {
    messages.INFO: 'text-blue-800 border border-blue-300 bg-blue-50 dark:text-blue-400 dark:border-blue-800',
    messages.SUCCESS: 'text-green-800 border border-green-300 bg-green-50 dark:text-green-400 dark:border-green-800',
    messages.WARNING: 'text-yellow-800 border border-yellow-300 bg-yellow-50 dark:text-yellow-300 dark:border-yellow-800',
    messages.ERROR: 'text-red-800 border border-red-300 bg-red-50 dark:text-red-400 dark:border-red-800',
}

SITE_ID = 1
LOGIN_REDIRECT_URL = "/patients_dashboard/"
SOCIALACCOUNT_ADAPTER = 'apps.authentication.adapters.MySocialAccountAdapter'


# OAuth
GITHUB_CLIENT_ID   = os.getenv("GITHUB_CLIENT_ID" , "")
GITHUB_SECRET_KEY  = os.getenv("GITHUB_SECRET_KEY", "") 

# Upload 
GITHUB_API_KEY     = os.getenv("GITHUB_API_KEY", None) 
GITHUB_API_ACCOUNT = os.getenv("GITHUB_API_ACCOUNT", 'https://github.com/appseed-projects4/') 

SOCIALACCOUNT_PROVIDERS = {
    'github': {
        'SCOPE': [
            'read:user',
            'user:email'
        ],        
        "APP": {
            "client_id": GITHUB_CLIENT_ID,
            "secret": GITHUB_SECRET_KEY,
        },
    },
}

SOCIALACCOUNT_QUERY_EMAIL = True

QUILL_CONFIGS = {
    'default':{
      "theme": "snow",
      "modules": {
        "syntax": True,
        "toolbar": [
          [
            {"header": []},
            {"align": []},
            "bold",
            "italic",
            "underline",
            "strike",
            "blockquote",
          ],
          ["code-block", "link"],
        ],
        "imageCompressor": {
          "quality": 0.8,
          "maxWidth": 2000,
          "maxHeight": 2000,
          "imageType": "image/jpeg",
          "debug": False,
          "suppressErrorLogging": True
        },
        "resize": {
          "showSize": True,
          "locale": {}
        }
      },
      "formats": [
        "header",
        "bold",
        "italic",
        "underline",
        "strike",
        "blockquote",
        "code-block",
        "link",
        "indent",
        "list",
        "align",
      ],
      "sanitize": True,
    }
}

# ### Async Tasks (Celery) Settings ###

CELERY_SCRIPTS_DIR        = os.path.join(BASE_DIR, "tasks_scripts" )

# CELERY_LOGS_URL           = "/tasks_logs/"
# CELERY_LOGS_DIR           = os.path.join(BASE_DIR, "tasks_logs"    )

CELERY_BROKER_URL         = os.environ.get("CELERY_BROKER", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND     = os.environ.get("CELERY_BROKER", "redis://127.0.0.1:6379/0")

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT    = 30 * 60
CELERY_CACHE_BACKEND      = "django-cache"
CELERY_RESULT_BACKEND     = "django-db"
CELERY_RESULT_EXTENDED    = True
CELERY_RESULT_EXPIRES     = 60*60*24*30 # Results expire after 1 month
CELERY_ACCEPT_CONTENT     = ["json"]
CELERY_TASK_SERIALIZER    = 'json'
CELERY_RESULT_SERIALIZER  = 'json'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
########################################


# DOCS_ROOT = os.path.join(BASE_DIR, 'docs/build/html')

DOCS_ROOT = os.path.join(BASE_DIR, 'docs/build/html')
DOCS_ACCESS = 'public'

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST=os.environ.get('EMAIL_HOST')
EMAIL_PORT=465
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
EMAIL_HOST_USER=os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD=os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_DISPLAY_NAME=os.environ.get('EMAIL_DISPLAY_NAME')



REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    #'DEFAULT_THROTTLE_CLASSES': [
    #    'apps.api.throttling.OncePerMinuteThrottle',
    #],
    #'DEFAULT_THROTTLE_RATES': {
    #    'once_per_minute': '1/min',
    #},
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
}

GUMROAD_ACCESS_TOKEN = os.environ.get('GUMROAD_ACCESS_TOKEN')
ANTHROPIC_API_KEY = os.environ.get('ANTHROPIC_API_KEY')

WEBPACK_LOADER = {
    "DEFAULT": {
        "BUNDLE_DIR_NAME": "frontend/",
        "STATS_FILE": os.path.join(BASE_DIR, "webpack-stats.json"),
    }
} 

VERSION = open('VERSION', 'r').readline()

LIMIT_AI_PROMPT_GUEST = os.environ.get('LIMIT_AI_PROMPT_GUEST', 3)
LIMIT_AI_PROMPT_AUTH  = os.environ.get('LIMIT_AI_PROMPT_AUTH' , 5)

# Redirects file
REDIRECTS_PATH = os.path.join('templates', 'redirects.json')
REDIRECTS = json.loads( open( REDIRECTS_PATH, 'r').read() )

JALALI_SETTINGS = {
    # JavaScript static files for the admin Jalali date widget
    "ADMIN_JS_STATIC_FILES": [
        "admin/jquery.ui.datepicker.jalali/scripts/jquery-1.10.2.min.js",
        "admin/jquery.ui.datepicker.jalali/scripts/jquery.ui.core.js",
        "admin/jquery.ui.datepicker.jalali/scripts/jquery.ui.datepicker-cc.js",
        "admin/jquery.ui.datepicker.jalali/scripts/calendar.js",
        "admin/jquery.ui.datepicker.jalali/scripts/jquery.ui.datepicker-cc-fa.js",
        "admin/main.js",
    ],
    # CSS static files for the admin Jalali date widget
    "ADMIN_CSS_STATIC_FILES": {
        "all": [
            "admin/jquery.ui.datepicker.jalali/themes/base/jquery-ui.min.css",
            "admin/css/main.css",
        ]
    },
}
